from collections import Counter
import requests


def test_metrics():
    """Should expose cluster metrics as-is."""
    # get cluster metrics exposed by yarnitor
    yarnitor = requests.get('http://web:8080/api/clusters/default')
    assert yarnitor.ok
    # get last mock metrics generated by YARN
    yarn = requests.get('http://yarn:8088/ws/v1/cluster/metrics?last')
    assert yarn.ok

    # nesting format exposed by YARN
    yarn_metrics = yarn.json()['clusterMetrics']
    # nesting format expected by DataTables in the UI
    yarnitor_metrics = yarnitor.json()['data'][0]

    for key in yarn_metrics.keys():
        assert yarnitor_metrics[key] == yarn_metrics[key], key

def test_applications():
    """Should expose all available YARN applications."""
    # get last applications exposed by yarnitor
    yarnitor = requests.get('http://web:8080/api/clusters/default/applications')
    assert yarnitor.ok
    # get last mock applications generated by YARN
    yarn = requests.get('http://yarn:8088/ws/v1/cluster/apps?last')
    assert yarn.ok

    # nesting format exposed by YARN
    yarn_apps = yarn.json()['apps']['app']
    # nesting format expected by DataTables in the UI
    yarnitor_apps = yarnitor.json()['data']

    # compare count of types for now
    yarn_types = Counter(m['applicationType'] for m in yarn_apps)
    yarnitor_types = Counter(m['applicationType'] for m in yarnitor_apps)
    assert yarnitor_types == yarn_types